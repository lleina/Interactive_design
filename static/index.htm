<html>

<head>
    <!---Imports d3 and topojson --->
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/topojson.v3.min.js"></script>
    <style>
        .gridlines line {
            stroke: #bbb;
        }

        .gridlines .domain {
            stroke: none;
        }
        .tooltip {
            position: absolute;
            text-align: left;
            width: 200px;
            height: auto;
            padding: 10px;
            font: 12px sans-serif;
            background: rgba(255, 255, 255, 0.9);
            border: solid 1px #aaa;
            border-radius: 8px;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.3s;
            box-shadow: 2px 2px 10px rgba(0,0,0,0.2);
        }
    </style>
</head>

<body>
    <h3>
        Leina Li (ll736), Aditya Manthri (anm97)
    </h3>
    <svg id="scattersvg" height="500" width="500" style="border:1px solid black"></svg>
    <script>
        const scatsvg = d3.select("svg#scattersvg");
        const tooltip = d3.select("body").append("div")
            .attr("class", "tooltip")
            .style("opacity", 0);
        width = scatsvg.attr("width");
        height = scatsvg.attr("height");
        const margins = { top: 10, right: 10, bottom: 50, left: 50 };
        const chartWidth = width - margins.left - margins.right;
        const chartHeight = height - margins.top - margins.bottom;
        let selectedPoints = [];

        var comparisonDiv = d3.select("body").append("div")
            .attr("class", "comparison")
            .style("opacity", 0);

        var dataset;
        d3.csv('./pokedex.csv', d3.autoType)
                .then((data) => { 
                    
                    dataset = data;
                    
                    yExtent = d3.extent(data, d=>d['Total']);
                    xExtent = d3.extent(data, d=>d['Generation']);
                    typeExtent = [];
                    data.forEach(function(d) {
                        if (!typeExtent.includes(d['Type I'])){
                            typeExtent.push(d['Type I']);
                        }
                    });
                    console.log(typeExtent)
                    yScale = d3.scaleLinear().domain(yExtent).range([chartHeight, 0]);
                    xScale = d3.scaleLinear().domain(xExtent).range([0, chartWidth]);
                    colors = [
                        "#FF0000", // Red
                        "#FFA500", // Orange
                        "#FFFF00", // Yellow
                        "#008000", // Green
                        "#00FFFF", // Cyan
                        "#0000FF", // Blue
                        "#800080", // Purple
                        "#FFC0CB", // Pink
                        "#A52A2A", // Brown
                        "#000000", // Black
                        "#808080", // Gray
                        "#FFFFFF", // White
                        "#800000", // Maroon
                        "#FFFFF0", // Ivory
                        "#F0FFF0", // Honeydew
                        "#F0FFFF", // Azure
                        "#F5F5DC"  // Beige
                    ];
                    const typeScale = d3.scaleOrdinal().domain(typeExtent).range(colors);
                    let chartArea = scatsvg.append('g')
                        .attr('transform', `translate(${margins.left}, ${margins.top})`);

                    let leftAxis = d3.axisLeft(yScale);
                    scatsvg.append('g')
                        .attr('class', 'y axis')
                        .attr('transform', `translate(${margins.left - 10},${margins.top})`)
                        .call(leftAxis);

                    let bottomAxis = d3.axisBottom(xScale)
                        .tickFormat(d3.format(".0f"))
                        .ticks(9)
                    let element = scatsvg.append('g')
                        .attr('class', 'y axis')
                        .attr('transform', `translate(${margins.left},${chartHeight + margins.top + 10})`)
                        .call(bottomAxis);

                    let leftGridlines = d3.axisLeft(yScale)
                        .tickSize(-chartWidth - 10)
                        .tickFormat('');
                    scatsvg.append('g').attr('class', 'gridlines')
                        .attr('transform', `translate(${margins.left - 10},${margins.top})`)
                        .call(leftGridlines)

                    let bottomGridlines = d3.axisBottom(xScale)
                        .tickSize(-chartHeight - 10)
                        .tickFormat('')
                        .ticks(9);
                    scatsvg.append('g').attr('class', 'gridlines')
                        .attr('transform', `translate(${margins.left},${chartHeight + margins.top + 10})`)
                        .call(bottomGridlines);

                        chartArea.selectAll('circle')
                            .data(data)
                            .enter().append('circle')
                            .attr('cx', function(d) { return xScale(d['Generation']); })
                            .attr('cy', function(d) { return yScale(d['Total']); })
                            .attr('r', '5px')
                            .attr('opacity', 0.5)
                            .style('fill', function(d) { return typeScale(d['Type I']); })
                            
                            .on("mouseover", function(event, d) {
                                // Define stats and maximum value for scaling the bars
                                const stats = [
                                    {name: 'HP', value: d['HP']},
                                    {name: 'Attack', value: d['Atk']},
                                    {name: 'Defense', value: d['Def']},
                                    {name: 'Sp. Atk', value: d['SpA']},
                                    {name: 'Sp. Def', value: d['SpD']},
                                    {name: 'Speed', value: d['Spe']}
                                ];
                                const maxStatValue = 255;

                                // Convert Pokémon name to match the URL format (assuming names are already standardized in your dataset)
                                let pokemonNameForUrl = d['Pokemon'].toLowerCase().replace(/ /g, '-');

                                // Construct the sprite URL
                                let spriteUrl = `https://img.pokemondb.net/sprites/home/normal/${pokemonNameForUrl}.png`;

                                // Start building the tooltip content with Pokémon name, types, and sprite
                                let tooltipHtml = `<strong>${d['Pokemon']}</strong><br/>
                                                    <img src="${spriteUrl}" alt="${d['Pokemon']}" style="width:100px; height:100px;"><br/>
                                                    Type: ${d['Type I']}` + (d['Type II'] ? `, ${d['Type II']}` : "") + `<br/>`;


                                // Add an SVG container for the stats bar chart
                                tooltipHtml += `<svg width="200" height="${stats.length * 20}" xmlns="http://www.w3.org/2000/svg">`;

                                // Generate bars for each stat
                                stats.forEach((stat, index) => {
                                    const barWidth = (stat.value / maxStatValue) * 180; // Scale bar width
                                    tooltipHtml += `<text x="0" y="${index * 20 + 15}" font-size="10">${stat.name}</text>`;
                                    tooltipHtml += `<rect x="50" y="${index * 20 + 10}" width="${barWidth}" height="10" style="fill:steelblue;"></rect>`;
                                    tooltipHtml += `<text x="${barWidth + 55}" y="${index * 20 + 15}" font-size="10">${stat.value}</text>`;
                                });

                                tooltipHtml += `</svg>`;

                                // Display the tooltip
                                tooltip.transition()
                                    .duration(200)
                                    .style("opacity", .9);
                                tooltip.html(tooltipHtml)
                                    .style("left", (event.pageX + 10) + "px")
                                    .style("top", (event.pageY - 28) + "px");
                            })


                            .on("click", function(event, d) {
                                // Toggle selection logic
                                const index = selectedPoints.findIndex(p => p.Pokemon === d.Pokemon);
                                if (index > -1) {
                                    selectedPoints.splice(index, 1); // Deselect if already selected
                                    d3.select(this).style('stroke', 'none');
                                } else {
                                    if (selectedPoints.length < 2) {
                                        selectedPoints.push(d); // Select if not already selected and less than 2 selected
                                        d3.select(this).style('stroke', 'black').style('stroke-width', 2);
                                    }
                                }

                                // Display comparison if two points are selected
                                if (selectedPoints.length === 2) {
                                    let comparisonHtml = "Comparison:<br/>";
                                    // Generate comparison content
                                    comparisonHtml += `<strong>${selectedPoints[0].Pokemon}</strong> vs <strong>${selectedPoints[1].Pokemon}</strong><br/>`;
                                    // Add more details as needed
                                    comparisonDiv.html(comparisonHtml)
                                        .style("opacity", 1)
                                        .style("position", "fixed")
                                        .style("bottom", "20px")
                                        .style("left", "20px")
                                        .style("background-color", "white")
                                        .style("padding", "10px")
                                        .style("border", "1px solid black")
                                        .style("border-radius", "8px");
                                } else {
                                    comparisonDiv.style("opacity", 0);
                                }
                            })

                            .on("mouseout", function() {
                                tooltip.transition()
                                    .duration(500)
                                    .style("opacity", 0);
                            });
                            



                    chartArea.raise()

        });

    </script>
</body>

</html>